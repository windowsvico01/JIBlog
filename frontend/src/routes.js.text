// These are the pages you can go to.
// They are all wrapped in the App component, which should contain the navbar etc
// See http://blog.mxstbr.com/2016/01/react-apps-with-pages for more information
// about the code splitting business
import { getAsyncInjectors } from './utils/asynclnjectors';
import NotFound from './containers/NotFound';
import cancleSagaOnLocationChange from 'utils/cancleSagaOnLocationChange';

const errorLoading = (err) => {
    console.error('Dynamic page loading failed', err);
};

const loadModule = (cb) => (componentModule) => {
    cb(null, componentModule.default);
};

export default function createRoutes(store) {
    const { injectReducer, injectSagas } = getAsyncInjectors(store);
    const loadComponent = ({ modulePath, hasReducer, hasSagas, path }, cb, loader) => {
        const reducerName = modulePath;
        const renderRoute = loader(cb);
        const importModules = Promise.all([
            hasReducer && System.import(`containers/${modulePath}/reducer`),
            hasSagas && System.import(`containers/${modulePath}/sagas`),
            System.import(`containers/${modulePath}/index`),
        ]);
        importModules.then(([reducer, sagas, component]) => {
            reducer && injectReducer(reducerName, reducer.default);
            sagas && injectSagas(cancleSagaOnLocationChange(sagas.default));
            renderRoute(component);
        }).catch(errorLoading);
    };
    return [{
        path: '/',
        name: 'dashboard',
        getComponent(nextState, cb) {
            loadComponent({ modulePath: 'Wrapper' }, cb, loadModule);
        },
        getChildRoutes(partialNextState, cb) {
            System.import('./modules').then((route) => {
                cb(null, route.default(loadComponent, loadModule));
            });
        }
    }, {
        path: '*',
        name: 'notFound',
        component: NotFound,
    }];
}
